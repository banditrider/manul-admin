{"version":3,"sources":["../src/actions.js"],"names":[],"mappings":"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","file":"actions.js","sourcesContent":["import _ from 'lodash';\nimport Papa from 'papaparse';\nimport flat from 'flat';\nimport routeUtils from './utils/route_utils';\nimport csv from './utils/csv';\n\nexport default {\n  manulAdmin: {\n    update(\n      { adminContext: { methods, gotoRoute, showError = _.noop, showSuccess = _.noop } },\n      collectionName, doc,\n    ) {\n      methods[collectionName].update.call(doc, (error) => {\n        if (error) {\n          showError(error);\n        } else {\n          showSuccess('Update successfull');\n          gotoRoute(routeUtils.getListRoute(collectionName).name);\n        }\n      });\n    },\n    create(\n      { adminContext: { methods, gotoRoute, showError = _.noop, showSuccess = _.noop } },\n      collectionName, doc,\n    ) {\n      methods[collectionName].create.call(doc, (error, _id) => {\n        if (error) {\n          showError(error);\n        } else {\n          showSuccess('Create successfull');\n          gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id });\n        }\n      });\n    },\n    destroy(\n      { adminContext: { methods, gotoRoute, showError = _.noop, showSuccess = _.noop } },\n      collectionName, _id,\n    ) {\n      /* eslint no-alert: 0*/\n      const confirmed = window.confirm(\"Really destroy? This can't be undone\");\n      if (confirmed) {\n        methods[collectionName].destroy.call({ _id }, (error) => {\n          if (error) {\n            showError(error);\n          } else {\n            showSuccess('Destroy successfull');\n            gotoRoute(routeUtils.getListRoute(collectionName).name);\n          }\n        });\n      }\n    },\n    downloadCsv(\n      { adminContext: { methods, showError = _.noop } },\n      collectionName,\n    ) {\n      methods[collectionName].export.call({}, (error, { data, keys }) => {\n        if (error) {\n          showError(error);\n        } else {\n          csv.exportAsCsv({ filename: `export_${collectionName}`, data, keys });\n        }\n      });\n    },\n    importCsv(\n      { adminContext: { methods } },\n      { collectionName, file, onInsert = _.noop, onUpdate = _.noop, onComplete = _.noop },\n    ) {\n      let counter = -1;\n      const imported = new Set();\n      Papa.parse(file, {\n        header: true,\n        dynamicTyping: true,\n        complete({ data }) {\n          data.forEach((entryUncleaned) => {\n            counter += 1;\n            const index = counter; // need constant closure copy\n            const checkForComplete = () => {\n              imported.add(index);\n              if (imported.size === data.length) {\n                onComplete();\n              }\n            };\n            // console.log('uncleaned', entryUncleaned);\n            const entry = flat.unflatten(\n              _.omitBy(entryUncleaned, value => value === 'NULL'),\n            );\n            // console.log('cleaned', entry);\n            if (entry._id) {\n              methods[collectionName].update.call(entry, (error) => {\n                onUpdate(index, error, entry);\n                checkForComplete();\n              });\n            } else {\n              delete entry._id; // if falsy\n              methods[collectionName].create.call(entry, (error, _id) => {\n                onInsert(index, error, { _id, ...entry });\n                checkForComplete();\n              });\n            }\n          });\n        },\n      });\n    },\n  },\n};\n"]}